from aiogram import Bot, Dispatcher, executor
from aiogram.types import Message, CallbackQuery
from keyboard import main_menu, request_get_contact, generate_apply_keyboard, generate_buy_menu, generate_main_menu, generate_profile_menu, generate_register_menu, generate_repair_menu

import os
from dotenv import load_dotenv

from database import connect_database
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

channel_id = "-1001673285930"
group_id = "-761682109"

class FSMhandler(StatesGroup):
    describtion = State()

class FSMAdmin(StatesGroup):
    name = State()
    second_name = State()
    phone_number = State() 

load_dotenv()

token = os.getenv("BOT_TOKEN")
bot = Bot(token)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=["start", "help"])
async def start(message: Message):
    chat_id = message.chat.id
    if message.chat.type != "group":
        full_name = message.from_user.full_name
        await bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç {full_name}!")
        await register_user(message)
    else:
        await bot.send_message(chat_id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –°–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –∑–∞—è–≤–∫–∏!")



async def register_user(message: Message):
    if message.chat.type != "group":
        chat_id = message.chat.id
        full_name = message.from_user.full_name

        database, cursor = connect_database()

        try:
            cursor.execute("""INSERT INTO users (full_name, chat_id)
                VALUES (?, ?)
            """, (full_name, chat_id))
        except:
            await bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                reply_markup=generate_main_menu())
        else:
            database.commit()
            await show_registrate_menu(message)
        finally:
            database.close()

async def show_registrate_menu(message: Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id, "–í–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                           reply_markup=generate_register_menu())


@dp.message_handler(lambda message:"–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in message.text, state=None)
async def back_to_main_menu(message: Message):
    if message.chat.type != "group":
        chat_id = message.chat.id
        await bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                reply_markup=generate_main_menu())


@dp.message_handler(lambda message:"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" in message.text, state=None)
async def cm_start(message: Message):
    await FSMAdmin.name.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")


@dp.message_handler(state=FSMAdmin.name)
async def check_register(message: Message, state: FSMContext):
    if message.text.isalpha():
        await load_name(message, state)
    else:
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –∏ —Ü–∏—Ñ—Ä")


async def load_name(message: Message, state: FSMContext):
    name = message.text
    database, cursor = connect_database()
    try:
        cursor.execute("UPDATE users SET name == ? WHERE chat_id == ?", (name, message.chat.id))
    except:
        pass
    else:
        database.commit()
    finally:
        database.close()    

    await FSMAdmin.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é")


@dp.message_handler(state=FSMAdmin.second_name)

async def check_register(message: Message, state: FSMContext):
    if message.text.isalpha():
        await load_second_name(message, state)
    else:
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –∏ —Ü–∏—Ñ—Ä")

async def load_second_name(message: Message, state: FSMContext):
    second_name = message.text
    database, cursor = connect_database()

    try:
        cursor.execute("UPDATE users SET second_name == ? WHERE chat_id == ?", (second_name, message.chat.id))
    except:
        pass
    else:
        database.commit()
    finally:
        database.close() 

    await FSMAdmin.next()
    await message.reply("–û—Ç—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:")


@dp.message_handler(state=FSMAdmin.phone_number)

async def check_register(message: Message, state: FSMContext):

    if len(message.text)<=13:
        if len(message.text)>=8:
            await load_phone_number(message, state)
        else:
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 9 —Ü–∏—Ñ—Ä")
    else:
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 13 —Ü–∏—Ñ—Ä")


async def load_phone_number(message: Message, state: FSMContext):    

    phone_number = message.text

    database, cursor = connect_database()
    chat_id = message.chat.id

    try:
        cursor.execute("UPDATE users SET phone_number == ? WHERE chat_id == ?", (phone_number, chat_id))
    except:
        pass
    else:
        database.commit()        
    finally:
        name = cursor.execute("SELECT name from users where chat_id == ?", (chat_id, )).fetchone()[0]
    await bot.send_message(chat_id, f"{name} –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    database.close() 
    await state.finish()
    await back_to_main_menu(message)


@dp.message_handler(lambda message:"–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É" in message.text, state=None)
async def apply(message: Message):
    if message.chat.type != "group":
        chat_id = message.chat.id
        await bot.send_message(chat_id, message.text,
                            reply_markup=generate_apply_keyboard())


@dp.message_handler(lambda message:"–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç" in message.text, state=None)
async def apply_to_repair(message: Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id, message.text,
                        reply_markup=generate_repair_menu())


@dp.message_handler(lambda message:"–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫—É–ø" in message.text, state=None)
async def apply_to_buy(message: Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id, message.text,
                        reply_markup=generate_buy_menu())


@dp.message_handler(lambda message:"–ù–∞–∑–∞–¥" in message.text, state=None)
async def go_back(message: Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id, message.text,
                        reply_markup=generate_apply_keyboard())


@dp.message_handler(lambda message:"–ü—Ä–æ—Ñ–∏–ª—å" in message.text, state=None)
async def open_profile_menu(message: Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id, message.text,
                            reply_markup=generate_profile_menu())


@dp.message_handler(lambda message:"–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" in message.text, state=None)
async def cm_start(message: Message):
    await FSMAdmin.name.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")


@dp.message_handler()
async def take_apply(message: Message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞", reply_markup=generate_profile_menu())
    if message.text == "–î—Ä—É–≥–æ–µ":
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö –≤–∞—à—É –∑–∞—è–≤–∫—É")
        await FSMhandler.describtion.set()
    if message.text == "–†–µ–º–æ–Ω—Ç –ü–ö" or message.text == "–ó–∞–º–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã" or message.text == "–ó–∞–º–µ–Ω–∞ –º—ã—à–∫–∏" or message.text == "–†–µ–º–æ–Ω—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞" or message.text == "–ü–æ–∫—É–ø–∫–∞ –ü–ö" or message.text == "–ü–æ–∫—É–ø–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã" or message.text == "–ü–æ–∫—É–ø–∫–∞ –º—ã—à–∫–∏" or message.text == "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞":
        describtion = message.text
        chat_id = message.chat.id
        database, cursor = connect_database()
        user_name = cursor.execute("SELECT name from users where chat_id == ?", (chat_id, )).fetchone()[0]
        user_second_name = cursor.execute("SELECT second_name from users where chat_id == ?", (chat_id, )).fetchone()[0]
        user_phone_number = cursor.execute("SELECT phone_number from users where chat_id == ?", (chat_id, )).fetchone()[0]
        database.close()
        await bot.send_message(channel_id, f"–ó–∞—è–≤–∫–∞: {describtion}\n–û—Ç: {user_second_name} {user_name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:{user_phone_number}",
                                                            reply_markup=main_menu)
        await bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ üë®‚Äçüíª",
                                                            reply_markup=generate_main_menu())


@dp.callback_query_handler(text="btnRandom")
async def random(message: Message):
    await bot.delete_message(message.message.chat.id, message.message.message_id)
    await bot.send_message(message.message.chat.id, f"{message.message.text}\n–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–æ")


@dp.message_handler(state=FSMhandler.describtion)
async def take_describtion(message: Message, state=FSMContext):
    describtion = message.text
    chat_id = message.chat.id
    database, cursor = connect_database()
    user_name = cursor.execute("SELECT name from users where chat_id == ?", (chat_id, )).fetchone()[0]
    user_second_name = cursor.execute("SELECT second_name from users where chat_id == ?", (chat_id, )).fetchone()[0]
    user_phone_number = cursor.execute("SELECT phone_number from users where chat_id == ?", (chat_id, )).fetchone()[0]
    database.close()
    await bot.send_message(channel_id, f"–ó–∞—è–≤–∫–∞: {describtion}\n–û—Ç: {user_second_name} {user_name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:{user_phone_number}",
                                                        reply_markup=main_menu)
    await bot.send_message(chat_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª —Å–≤—è–∂–µ—Ç—Å—è —Å–≤–∞–º–∏",
                                                        reply_markup=generate_main_menu())
    await state.finish()

executor.start_polling(dp, skip_updates=True)



